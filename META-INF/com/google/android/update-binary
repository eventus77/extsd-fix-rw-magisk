#!/sbin/sh

# Start log tracking
# LF=/data/ExtSD_Fix_RW_inst.log
LF=/cache/ExtSD_Fix_RW_inst.log
rm "${LF}"
touch "${LF}"
exec >> "${LF}" 2>&1

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='/system/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting $1 to $2"
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ ! -z "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

# Unmount and clean the unziped files before exit
# Usage: safe_exit "1" "! Operation failed"
safe_exit() {
  rm -rf $MODPATH
  umount $MOUNTPATH
  losetup -d $LOOPDEVICE
  rmdir $MOUNTPATH
  if ! $BOOTMODE; then
    umount /system
    umount /vendor 2>/dev/null
  fi
  rm -rf $INSTALLER
  if [ ! -z "$2"]; then
    ui_print "$2"
  fi
  exit "$1"
}

# Custom function from Ext_SD_Fix
save_perm() {
   own=$(ls -l "$1" | sed 's#.* 1 ##g' | sed 's# .*##g')
   gro=$(ls -l "$1" | sed "s#.* ${own} ##g" | sed 's# .*##g')
   perms=$(ls -l "$1" | sed 's# .*##g')
   op=0
   if [ "${perms:1:1}" = "r" ] ; then
      op=$((op+4))
   fi
   if [ "${perms:2:1}" = "w" ] ; then
      op=$((op+2))
   fi
   if [ "${perms:3:1}" = "x" ] ; then
      op=$((op+1))
   fi
   gp=0
   if [ "${perms:4:1}" = "r" ] ; then
      gp=$((gp+4))
   fi
   if [ "${perms:5:1}" = "w" ] ; then
      gp=$((gp+2))
   fi
   if [ "${perms:6:1}" = "x" ] ; then
      gp=$((gp+1))
   fi
   wp=0
   if [ "${perms:7:1}" = "r" ] ; then
      wp=$((wp+4))
   fi
   if [ "${perms:8:1}" = "w" ] ; then
      wp=$((wp+2))
   fi
   if [ "${perms:9:1}" = "x" ] ; then
      wp=$((wp+1))
   fi
   # set_perm ${own} ${gro} 0${op}${gp}${wp} "$2"
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

# This path should work in any cases
TMPDIR=/dev/tmp

MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID

# FILE LOCATIONS

if [ -d "/system/system" ]; then
  SYS=/system/system
else
  SYS=/system
fi

if [ ! -d "$SYS/vendor" ] || [ -L "$SYS/vendor" ]; then
  VEN=/vendor
elif [ -d "$SYS/vendor" ] || [ -L "/vendor" ]; then
  VEN=$SYS/vendor
fi

if [ -e "$VEN/build.prop" ] && [ ! -e "$SYS/build.prop" ]; then
  BUILDPROP=$VEN/build.prop
elif [ -e "$SYS/build.prop" ] && [ ! -e "$VEN/build.prop" ]; then
  BUILDPROP=$SYS/build.prop
elif [ -e "$SYS/build.prop" ] && [ -e "$VEN/build.prop" ]; then
  if [ $(wc -c < "$SYS/build.prop") -ge $(wc -c < "$VEN/build.prop") ]; then
    BUILDPROP=$SYS/build.prop
  else
    BUILDPROP=$VEN/build.prop
  fi
fi

if [ -d "/sdcard0" ]; then
  SDCARD=/sdcard0
elif [ -d "/sdcard/0" ]; then
  SDCARD=/sdcard/0
else
  SDCARD=/sdcard
fi

MIRRDIR=""
if $BOOTMODE; then
  MIRRDIR="/dev/magisk/mirror"
fi

MIRRSYS="$MIRRDIR$SYS"

# Clean up temporary files
rm -rf $INSTALLER 2>/dev/null

mkdir -p $INSTALLER
cd $INSTALLER
unzip -o "$ZIP" "common/*" module.prop

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

# Timestamp creation
timestamp=$(date -u "+%Y%m%d %H:%M:%S")
ui_print "- Creating timestamp ${timestamp}"

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
  ui_print "! Failed: /system could not be mounted!"
  exit 1
fi

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; fi;

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if is_mounted /data; then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/magisk.img" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required for this mod!"
    exit 1
  fi
else
  IMG=/cache/magisk.img
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

request_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- $IMG detected!"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${SIZE}M"
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

mount_image $IMG $MOUNTPATH
if ! is_mounted $MOUNTPATH; then
  ui_print "! $IMG mount failed... abort"
  exit 1
fi

# Uninstall module if it is installed already in RECOVERY mode
if ! $BOOTMODE && [ -d "$MODPATH" ]; then
  ui_print "- Removing module $MODPATH"
  if [ "${API}" -ge "23" ]; then
    fpath_ori="/data/system/packages.xml"
    fpath_bak="${fpath_ori}-RW.bak"
    if [ -f "${fpath_bak}" ]; then
      ui_print "- Restoring backup ${fpath_bak}"
      cp -af "${fpath_bak}" "${fpath_ori}" && \
      # set_perm  "${fpath_ori}"  1000  1000  0644  0644 && \
      rm "${fpath_bak}" && \
      rm /magisk/.core/post-fs-data.d/$CHECKERSCRIPT 2>/dev/null || \
      safe_exit "1" "! Restoration failed"
    fi
  fi
  safe_exit "0" "- Done"
else
  ui_print "- Installing module $MODPATH"
  if [ "${API}" -ge "23" ]; then
    fpath_ori="/data/system/packages.xml"
    fpath_bak="${fpath_ori}-RW.bak"
    if [ -f "${fpath_bak}" ]; then
      ui_print "- Restoring backup ${fpath_bak}"
      cp -af "${fpath_bak}" "${fpath_ori}" && \
      # set_perm  "${fpath_ori}"  1000  1000  0644  0644 && \
      rm "${fpath_bak}" && \
      rm /magisk/.core/post-fs-data.d/$CHECKERSCRIPT 2>/dev/null || \
      safe_exit "1" "! Restoration failed"
    fi
  fi
fi

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# Copy files
# ui_print "- Copying files"
# unzip -o "$ZIP" "system/*" -d $MODPATH

# ui_print "- Detecting current API version"
# API=$(cat /system/build.prop | grep "ro.build.version.sdk=" | dd bs=1 skip=21 count=2 2>/dev/null)
ui_print "- API v${API} detected"

if [ "${API}" -lt "19" ]; then
  safe_exit "0" "- Nothing to do."

elif [ "${API}" -le "22" ]; then
  ui_print "- Logic for API 22"
  fpath_ori="$SYS/etc/permissions/platform.xml"
  fpath_bak="${fpath_ori}-RW-${timestamp}.bak"
  fpath_tmp="$INSTALLER/platform-RW.xml"

  ui_print "- Copying file $MIRRDIR${fpath_ori}"
  mkdir -p $MODPATH$SYS/etc/permissions
  cp -af "$MIRRDIR${fpath_ori}" "$MODPATH${fpath_ori}"

  ui_print "- Detecting WRITE_EXTERNAL_STORAGE presence"
  HasPerm=$(awk -e '/<permission[^<>]*name="android\.permission\.WRITE_EXTERNAL_STORAGE"[^<>]*>/ {print "1";} 0 ;' "$MODPATH${fpath_ori}")
  ui_print "      Perm?${HasPerm}"

  ui_print "- Detecting media_rw presence"
  HasGid=$(awk -e '/<permission[^<>]*name="android\.permission\.WRITE_EXTERNAL_STORAGE"[^<>]*>/ {a=1;} ; a&&/media_rw/ {print "1";} ; a&&/<\/permission>/ {a=0;} 0 ;' "$MODPATH${fpath_ori}")
  ui_print "      GID?${HasGid}"

  if [ "${HasPerm}" -eq "1" ]; then
    ui_print "- Removing WRITE_EXTERNAL_STORAGE"
    # removes permission "WRITE_EXTERNAL_STORAGE"
    awk -e 'BEGIN {a=0;} ;
          /<permission[^<>]*name="android\.permission\.WRITE_EXTERNAL_STORAGE"[^<>]*>/ {a=1;} ;
          (1-a) {print $0;} ;
          a&&/<\/permission>/ {a=0;} 0 ;' \
             "$MODPATH${fpath_ori}" > "${fpath_tmp}"
  else
    ui_print "- Adding WRITE_EXTERNAL_STORAGE"
    # adds permission "WRITE_EXTERNAL_STORAGE"
    awk -e '/<permission[^<>]*name="android\.permission\.ACCESS_MTP"[^<>]*>/ {print "    <permission name=\"android.permission.WRITE_EXTERNAL_STORAGE\">";
          print "        <group gid=\"sdcard_r\"/>";
          print "        <group gid=\"sdcard_rw\"/>";
          print "    </permission>";
          print "";} 1 ;' \
             "$MODPATH${fpath_ori}" > "${fpath_tmp}"
  fi
  # overwrites the changes
  ui_print "- Overwrites changes"
  cat "${fpath_tmp}" > "$MODPATH${fpath_ori}"

  if [ "${HasGid}" -eq "1" ]; then
    ui_print "- Removing media_rw from WRITE_EXTERNAL_STORAGE"
    # removes permission to "media_rw" for "WRITE_EXTERNAL_STORAGE"
    awk -e 'BEGIN {a=0;} ;
          /<permission[^<>]*name="android\.permission\.WRITE_EXTERNAL_STORAGE"[^<>]*>/ {a=1;} ;
          a&&!/media_rw/ {print $0;} ;
          (1-a) {print $0;} 0 ;
          a&&/<\/permission>/ {a=0;} 0 ;' \
             "$MODPATH${fpath_ori}" > "${fpath_tmp}"
  else
    ui_print "- Inserting media_rw from WRITE_EXTERNAL_STORAGE"
    # adds permission to "media_rw" for "WRITE_EXTERNAL_STORAGE"
    awk -e '/<permission[^<>]*name="android\.permission\.WRITE_EXTERNAL_STORAGE"[^<>]*>/ {p=1} ;
          p&&/media_rw/{p=0} ;
          p&&/<\/permission>/{print "        <group gid=\"media_rw\" />";p=0;} 1 ;' \
             "$MODPATH${fpath_ori}" > "${fpath_tmp}"
  fi
  # feeds back into the original file
  ui_print "- Write changes back to file"
  cat "${fpath_tmp}" > "$MODPATH${fpath_ori}"
  # removes temporary file
  ui_print "- Removing temporary file"
  rm "${fpath_tmp}"
  # ui_print "- Fixing permissions"
  # changes permissions
  # copy_perm "${fpath_ori}" "$MODPATH${fpath_ori}"

# elif [ "${API}" -le "23" ]; then
else
  ui_print "- Logic for API 23+"

  fpath_ori="/data/system/packages.xml"
  fpath_bak="${fpath_ori}-RW.bak"

  # backups the original file
  ui_print "- Backing up file as ${fpath_bak}"
  cp -af "${fpath_ori}" "${fpath_bak}"

  # Copy the cleaning up script for post-uninstallation jobs
  [ ! -d "/magisk/.core/post-fs-data.d" ] && mkdir -p "/magisk/.core/post-fs-data.d"
  cp -af "$INSTALLER/common/$CHECKERSCRIPT" "/magisk/.core/post-fs-data.d"

  ui_print "- Copying dynamic patch scipt $DYNAMICSCRIPT"
  cp -af "$INSTALLER/common/$DYNAMICSCRIPT" "$MODPATH"
  LATESTARTSERVICE=true

# else
#    ui_print "- Logic for API greater than 23"
#    ui_print "- Not compatible."
#    rm -rf $MODPATH

fi

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
if $AUTOMOUNT; then
  mktouch $MODPATH/auto_mount
fi

# prop files
if $PROPFILE; then
  cp -af $INSTALLER/common/system.prop $MODPATH/system.prop
fi

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
if $POSTFSDATA; then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if $LATESTARTSERVICE; then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

ui_print "- Setting permissions"
set_permissions

ui_print "- Unmounting partitions"

umount $MOUNTPATH
losetup -d $LOOPDEVICE
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M..."
  resize2fs $IMG ${NEWDATASIZE}M
fi

if ! $BOOTMODE; then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- Done"
exit 0
